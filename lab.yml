- name: Create lab environment
  hosts: localhost
  connection: local
  tasks:
  - name: Create ~/.ssh directory if it does not exist
    file:
      path: ~/.ssh
      state: directory
  - name: Generate personal SSH keys if they do not already exist
    openssh_keypair:
      path: ~/.ssh/id_rsa
      force: False
      regenerate: never
  - name: Generate Lab SSH keys
    openssh_keypair:
      path: ~/.ssh/lab_rsa
      force: False
      regenerate: never
  - name: Copy SSH config to localhost
    copy:
      src: config/ssh.config
      dest: ~/.ssh/config
  - name: Terraform apply
    terraform:
      lock: no
      force_init: true
      project_path: './'
      state: present
  - name: Terraform refresh
    shell: terraform refresh
  - name: Pause 1 minute to let VMs boot up
    pause:
      minutes: 1
      
- name: Push SSH key to bastion
  hosts: bastion
  remote_user: azureadmin
  become: yes
  tasks:
  - name: Set personal authorized key taken from file
    authorized_key:
      user: azureadmin
      state: present
      key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
  - name: Push SSH azureadmin private key
    copy:
      src: ~/.ssh/lab_rsa
      dest: /home/azureadmin/.ssh/id_rsa
      mode: '0600'
      owner: azureadmin
      group: users

- name: Push SSH config
  hosts: all
  remote_user: azureadmin
  tasks:
  - name: Push SSH config to all VMs
    copy:
      src: config/ssh.config
      dest: /home/azureadmin/.ssh/config
      owner: azureadmin
      group: users
        
- name: Configure etc hosts
  hosts: all
  remote_user: azureadmin
  become: yes
  tasks:
  - name: Configure etc hosts
    blockinfile:
      path: /etc/hosts
      state: present
      block: |
        # NFS Server
        10.0.0.6 nfs-0
        # Clients
        10.0.0.10 client-0
        10.0.0.11 client-1
        10.0.0.12 client-2
        
- name: Comfigure NFS Server
  hosts: nfs
  remote_user: azureadmin
  become: yes
  tasks:
  - name: Copy /etc/exports
    copy:
      src: config/nfs.exports.config
      dest: /etc/exports
  - name: Create /srv/nfs mount point
    file:
      path: /srv/nfs
      state: directory
  - name: Create PV
    command: sudo pvcreate /dev/disk/azure/scsi1/lun0
    args:
      creates: /etc/delete_to_retry_pvcreate
  - name: Create pass file
    file:
      path: "/etc/delete_to_retry_pvcreate"
      state: touch
  - name: Create VG
    command: sudo vgcreate NFS /dev/disk/azure/scsi1/lun0
    args:
      creates: /etc/delete_to_retry_vgcreate
  - name: Create pass file
    file:
      path: "/etc/delete_to_retry_vgcreate"
      state: touch
  - name: Create LV
    command: sudo lvcreate -l 100%FREE -n export0 NFS
    args:
      creates: /etc/delete_to_retry_lvcreate
  - name: Create pass file
    file:
      path: "/etc/delete_to_retry_lvcreate"
      state: touch
  - name: Create filesystem on LV
    command: sudo mkfs.xfs /dev/NFS/export0
    args:
      creates: /etc/delete_to_retry_mkfs
  - name: Create pass file
    file:
      path: "/etc/delete_to_retry_mkfs"
      state: touch
  - name: Create fstab entry
    command: echo "/dev/NFS/export0 /srv/nfs xfs defaults 0 0" >> /etc/fstab
    args:
      creates: /etc/delete_to_retry_fstab
  - name: Create pass file
    file:
      path: "/etc/delete_to_retry_fstab"
      state: touch
  - name: Mount all
    command: sudo mount -a
    args:
      creates: /etc/delete_to_retry_mount
  - name: Create pass file
    file:
      path: "/etc/delete_to_retry_mount"
      state: touch
  - name: Enable nfsd
    command: sudo systemctl enable nfs-server
  - name: Start nfsd
    command: sudo systemctl start nfs-server
  - name: Create /srv/nfs/data
    file: 
      path: /srv/nfs/data
      state: directory
  - name: Create /srv/nfs/log
    file: 
      path: /srv/nfs/log
      state: directory
  - name: Create /srv/nfs/shared
    file: 
      path: /srv/nfs/shared
      state: directory
  - name: Create /srv/nfs/logbackups
    file: 
      path: /srv/nfs/logbackups
      state: directory
    
- name: Configure NFS Clients
  hosts: client
  remote_user: azureadmin
  become: yes
  tasks:
  - name: Create /hana/data
    file: 
      path: /hana/data
      state: directory
  - name: Create /hana/log
    file: 
      path: /hana/log
      state: directory
  - name: Create /hana/shared
    file: 
      path: /hana/shared
      state: directory
  - name: Create /hana/logbackups
    file: 
      path: /hana/logbackups
      state: directory
  - name: Configure NFS Exports in /etc/fstab
    blockinfile:
      path: /etc/fstab
      state: present
      block: |
        # NFS Exports
        nfs-0:/data /hana/data nfs4 defaults 0 0
        nfs-0:/log /hana/log nfs4 defaults 0 0
        nfs-0:/shared /hana/shared nfs4 defaults 0 0
        nfs-0:/logbackups /hana/logbackups nfs4 defaults 0 0
  - name: Mount Exports
    command: sudo mount -a

- name: Configure node_exporter
  hosts: all
  remote_user: azureadmin
  become: yes
  tasks:
  - name: Install node_exporter
    zypper:
      name: golang-github-prometheus-node_exporter
      state: present
    environment:
      ZYPP_LOCK_TIMEOUT: 120      
  - name: Configure node_exporter
    copy:
      src: config/prometheus-node_exporter
      dest: /etc/sysconfig/prometheus-node_exporter      
  - name: Enable prometheus-node_exporter
    command: sudo systemctl --now enable prometheus-node_exporter
  - name: Restart prometheus
    command: sudo systemctl restart prometheus-node_exporter
    
- name: Configure node_exporter
  hosts: bastion
  remote_user: azureadmin
  become: yes
  tasks:
  - name: Enable SUSE PackageHub
    command: sudo SUSEConnect -p PackageHub/15.3/x86_64
    args:  
      creates: /etc/zypp/repos.d/SUSE_Package_Hub_x86_64:SUSE-PackageHub-15-SP3-Pool.repo
  - name: Install prometheus
    zypper:
      name: golang-github-prometheus-prometheus
      state: present
    environment:
      ZYPP_LOCK_TIMEOUT: 120      
  - name: Enable prometheus
    command: sudo systemctl --now enable prometheus
  - name: Configure prometheus
    copy:
      src: config/prometheus.yml
      dest: /etc/prometheus/
  - name: Configure prometheus rules
    copy:
      src: config/nfs_client.rules
      dest: /etc/prometheus/   
  - name: Restart prometheus
    command: sudo systemctl restart prometheus    
  - name: Install grafana
    zypper:
      name: grafana
      state: present
    environment:
      ZYPP_LOCK_TIMEOUT: 120
  - name: Enable grafana
    command: sudo systemctl --now enable grafana-server
  - name: Restart grafana
    command: sudo systemctl restart grafana-server   
